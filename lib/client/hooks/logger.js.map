{"version":3,"sources":["../../../src/client/hooks/logger.js"],"names":["log","hook","message","type","path","method","error","debug","data","trace","params","result"],"mappings":";;;;;QAGgBA,G,GAAAA,G;;AAFhB;;;;;;AAEO,SAASA,GAAT,CAAcC,IAAd,EAAoB;AACzB,MAAIC,UAAaD,KAAKE,IAAlB,UAA2BF,KAAKG,IAAhC,mBAAkDH,KAAKI,MAA3D;;AAEA,MAAIJ,KAAKE,IAAL,KAAc,OAAlB,EAA2B;AACzBD,sBAAgBD,KAAKK,KAAL,CAAWJ,OAA3B;AACD;;AAED,qBAAOK,KAAP,CAAaL,OAAb;AACA,MAAID,KAAKK,KAAT,EAAgB;AACd,uBAAOA,KAAP,CAAaL,KAAKK,KAAlB;AACD;AACD,MAAIL,KAAKO,IAAT,EAAe;AACb,uBAAOC,KAAP,CAAaR,KAAKO,IAAlB;AACD;AACD,MAAIP,KAAKS,MAAT,EAAiB;AACf,uBAAOD,KAAP,CAAaR,KAAKS,MAAlB;AACD;AACD,MAAIT,KAAKU,MAAT,EAAiB;AACf,uBAAOF,KAAP,CAAaR,KAAKU,MAAlB;AACD;AACF,C,CAvBD","file":"logger.js","sourcesContent":["// A hook that logs service method before, after and error\r\nimport logger from 'loglevel'\r\n\r\nexport function log (hook) {\r\n  let message = `${hook.type}: ${hook.path} - Method: ${hook.method}`\r\n\r\n  if (hook.type === 'error') {\r\n    message += `: ${hook.error.message}`\r\n  }\r\n\r\n  logger.debug(message)\r\n  if (hook.error) {\r\n    logger.error(hook.error)\r\n  }\r\n  if (hook.data) {\r\n    logger.trace(hook.data)\r\n  }\r\n  if (hook.params) {\r\n    logger.trace(hook.params)\r\n  }\r\n  if (hook.result) {\r\n    logger.trace(hook.result)\r\n  }\r\n}\r\n"]}