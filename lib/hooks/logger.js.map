{"version":3,"sources":["../../src/hooks/logger.js"],"names":["log","logger","require","hook","message","type","path","method","error","debug","silly","data","params","result"],"mappings":";;;;;QAGgBA,G,GAAAA,G;AAHhB;AACA,IAAMC,SAASC,QAAQ,SAAR,CAAf;;AAEO,SAASF,GAAT,CAAcG,IAAd,EAAoB;AACzB,MAAIC,UAAaD,KAAKE,IAAlB,UAA2BF,KAAKG,IAAhC,mBAAkDH,KAAKI,MAA3D;;AAEA,MAAIJ,KAAKE,IAAL,KAAc,OAAlB,EAA2B;AACzBD,sBAAgBD,KAAKK,KAAL,CAAWJ,OAA3B;AACD;;AAED,MAAID,KAAKK,KAAT,EAAgB;AACdP,WAAOO,KAAP,CAAaJ,OAAb;AACD,GAFD,MAEO;AACLH,WAAOQ,KAAP,CAAaL,OAAb;AACD;;AAEDH,SAAOS,KAAP,CAAa,WAAb,EAA0BP,KAAKQ,IAA/B;AACAV,SAAOS,KAAP,CAAa,aAAb,EAA4BP,KAAKS,MAAjC;;AAEA,MAAIT,KAAKU,MAAT,EAAiB;AACfZ,WAAOS,KAAP,CAAa,aAAb,EAA4BP,KAAKU,MAAjC;AACD;AACF","file":"logger.js","sourcesContent":["// A hook that logs service method before, after and error\r\nconst logger = require('winston')\r\n\r\nexport function log (hook) {\r\n  let message = `${hook.type}: ${hook.path} - Method: ${hook.method}`\r\n\r\n  if (hook.type === 'error') {\r\n    message += `: ${hook.error.message}`\r\n  }\r\n\r\n  if (hook.error) {\r\n    logger.error(message)\r\n  } else {\r\n    logger.debug(message)\r\n  }\r\n\r\n  logger.silly('hook.data', hook.data)\r\n  logger.silly('hook.params', hook.params)\r\n\r\n  if (hook.result) {\r\n    logger.silly('hook.result', hook.result)\r\n  }\r\n}\r\n"]}