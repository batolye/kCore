{"version":3,"sources":["../../src/hooks/query.js"],"names":["marshallComparisonQuery","marshallGeometryQuery","populateObject","populateObjects","marshallComparisonFieldsInQuery","queryObject","forOwn","value","key","number","toNumber","Number","isNaN","date","utc","isValid","Date","format","hook","query","params","geometry","geoOperator","keys","find","startsWith","isNil","coordinates","map","coordinate","serviceField","idField","nameServiceAs","nameIdAs","app","data","get","Promise","resolve","service","message","getService","Error","id","set","user","then","object","Array","isArray","paginate","objects"],"mappings":";;;;;;;;;;QA2BgBA,uB,GAAAA,uB;QAQAC,qB,GAAAA,qB;QAuBAC,c,GAAAA,c;QAiDAC,e,GAAAA,e;;AA3GhB;;;;AACA;;;;;;AACA;;AAEA;;AAEA,SAASC,+BAAT,CAA0CC,WAA1C,EAAuD;AACrD,mBAAEC,MAAF,CAASD,WAAT,EAAsB,UAACE,KAAD,EAAQC,GAAR,EAAgB;AACpC;AACA,QAAI,QAAOD,KAAP,uDAAOA,KAAP,OAAiB,QAArB,EAA+B;AAC7BH,sCAAgCG,KAAhC;AACD,KAFD,MAEO,IAAKC,QAAQ,KAAT,IAAoBA,QAAQ,MAA5B,IAAwCA,QAAQ,KAAhD,IAA2DA,QAAQ,MAAvE,EAAgF;AACrF,UAAIC,SAAS,iBAAEC,QAAF,CAAWH,KAAX,CAAb;AACA;AACA,UAAI,CAACI,OAAOC,KAAP,CAAaH,MAAb,CAAL,EAA2B;AACzBJ,oBAAYG,GAAZ,IAAmBC,MAAnB;AACD,OAFD,MAEO;AACL;AACA,YAAII,OAAO,iBAAOC,GAAP,CAAWP,KAAX,CAAX;AACA,YAAIM,KAAKE,OAAL,EAAJ,EAAoB;AAClBV,sBAAYG,GAAZ,IAAmB,IAAIQ,IAAJ,CAASH,KAAKI,MAAL,EAAT,CAAnB;AACD;AACF;AACF;AACF,GAjBD;AAkBD;;AAEM,SAASjB,uBAAT,CAAkCkB,IAAlC,EAAwC;AAC7C,MAAIC,QAAQD,KAAKE,MAAL,CAAYD,KAAxB;AACA,MAAIA,KAAJ,EAAW;AACT;AACAf,oCAAgCe,KAAhC;AACD;AACF;;AAEM,SAASlB,qBAAT,CAAgCiB,IAAhC,EAAsC;AAC3C,MAAIC,QAAQD,KAAKE,MAAL,CAAYD,KAAxB;AACA,MAAI,CAACA,KAAL,EAAY;;AAEZ,MAAI,sBAAOA,MAAME,QAAb,MAA0B,QAA9B,EAAwC;AACtC;AACA,QAAIC,cAAc,iBAAEC,IAAF,CAAOJ,MAAME,QAAb,EAAuBG,IAAvB,CAA4B;AAAA,aAAOhB,IAAIiB,UAAJ,CAAe,GAAf,CAAP;AAAA,KAA5B,CAAlB;AACAH,kBAAcH,MAAME,QAAN,CAAeC,WAAf,CAAd;AACA,qBAAEhB,MAAF,CAASgB,WAAT,EAAsB,UAACf,KAAD,EAAQC,GAAR,EAAgB;AACpC;AACA,UAAIA,IAAIiB,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AACvB;AACA,YAAI,CAAC,iBAAEC,KAAF,CAAQnB,MAAMoB,WAAd,CAAL,EAAiC;AAC/BpB,gBAAMoB,WAAN,GAAoBpB,MAAMoB,WAAN,CAAkBC,GAAlB,CAAsB;AAAA,mBAAc,iBAAElB,QAAF,CAAWmB,UAAX,CAAd;AAAA,WAAtB,CAApB;AACD,SAFD,MAEO;AACL;AACAP,sBAAYd,GAAZ,IAAmB,iBAAEE,QAAF,CAAWH,KAAX,CAAnB;AACD;AACF;AACF,KAXD;AAYD;AACF;;AAEM,SAASL,cAAT,CAAyB4B,YAAzB,EAAuCC,OAAvC,EAAgDC,aAAhD,EAA+DC,QAA/D,EAAyE;AAC9E,SAAO,UAAUf,IAAV,EAAgB;AACrB,QAAIgB,MAAMhB,KAAKgB,GAAf;AACA,QAAIC,OAAOjB,KAAKiB,IAAhB;AACA,QAAIf,SAASF,KAAKE,MAAlB;AACA,QAAID,QAAQC,OAAOD,KAAnB;;AAEA;AACA,QAAI,sBAAO,iBAAEiB,GAAF,CAAMhB,MAAN,EAAca,YAAYF,OAA1B,CAAP,MAA8C,QAAlD,EAA4D,OAAOM,QAAQC,OAAR,CAAgBpB,IAAhB,CAAP;;AAE5D;AACA;AACA,QAAIqB,UAAU,iBAAEH,GAAF,CAAMD,IAAN,EAAYL,YAAZ,KAA6B,iBAAEM,GAAF,CAAMjB,KAAN,EAAaW,YAAb,CAA3C;AACA,QAAI,OAAOS,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAMC,2CAAyCV,YAAzC,WAA2DS,OAA3D,8BAAN;AACAA,gBAAUL,IAAIO,UAAJ,CAAeF,OAAf,CAAV;AACA,UAAI,CAACA,OAAL,EAAc;AACZ,cAAM,IAAIG,KAAJ,CAAUF,OAAV,CAAN;AACD;AACF,KAND,MAMO,IAAI,CAACD,OAAL,EAAc;AACnB,YAAM,IAAIG,KAAJ,SAAgBZ,YAAhB,qCAAN;AACD;AACD;AACA,QAAIa,KAAK,iBAAEP,GAAF,CAAMD,IAAN,EAAYJ,OAAZ,KAAwB,iBAAEK,GAAF,CAAMjB,KAAN,EAAaY,OAAb,CAAjC;;AAEA,QAAI,CAACY,EAAL,EAAS;AACP,YAAM,IAAID,KAAJ,sBAA6BX,OAA7B,+BAAN;AACD;;AAED;AACA,qBAAEa,GAAF,CAAMxB,MAAN,EAAcY,iBAAiBF,YAA/B,EAA6CS,OAA7C;AACA;AACA,QAAI,OAAOI,EAAP,KAAc,QAAlB,EAA4B;AAC1B,aAAOJ,QAAQH,GAAR,CAAYO,EAAZ,EAAgB,EAAEE,MAAM3B,KAAKE,MAAL,CAAYyB,IAApB,EAAhB,EAA4CC,IAA5C,CAAiD,kBAAU;AAChE,YAAI,CAACC,MAAL,EAAa;AACX,gBAAM,IAAIL,KAAJ,iCAAwCC,EAAxC,+BAAN;AACD;AACD;AACA,yBAAEC,GAAF,CAAMxB,MAAN,EAAca,YAAYF,OAA1B,EAAmCgB,MAAnC;AACA,eAAO7B,IAAP;AACD,OAPM,CAAP;AAQD,KATD,MASO;AACL;AACA,uBAAE0B,GAAF,CAAMxB,MAAN,EAAca,YAAYF,OAA1B,EAAmCY,EAAnC;AACA,aAAON,QAAQC,OAAR,CAAgBpB,IAAhB,CAAP;AACD;AACF,GA7CD;AA8CD;;AAEM,SAASf,eAAT,CAA0B2B,YAA1B,EAAwCC,OAAxC,EAAiDC,aAAjD,EAAgEC,QAAhE,EAA0E;AAC/E,SAAO,UAAUf,IAAV,EAAgB;AACrB,QAAIgB,MAAMhB,KAAKgB,GAAf;AACA,QAAIC,OAAOjB,KAAKiB,IAAhB;AACA,QAAIf,SAASF,KAAKE,MAAlB;AACA,QAAID,QAAQC,OAAOD,KAAnB;;AAEA;AACA,QAAI6B,MAAMC,OAAN,CAAc,iBAAEb,GAAF,CAAMhB,MAAN,EAAca,YAAYF,OAA1B,CAAd,CAAJ,EAAuD,OAAOM,QAAQC,OAAR,CAAgBpB,IAAhB,CAAP;;AAEvD;AACA;AACA,QAAIqB,UAAU,iBAAEH,GAAF,CAAMD,IAAN,EAAYL,YAAZ,KAA6B,iBAAEM,GAAF,CAAMjB,KAAN,EAAaW,YAAb,CAA3C;AACA,QAAI,OAAOS,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAMC,2CAAyCV,YAAzC,WAA2DS,OAA3D,8BAAN;AACAA,gBAAUL,IAAIO,UAAJ,CAAeF,OAAf,CAAV;AACA,UAAI,CAACA,OAAL,EAAc;AACZ,cAAM,IAAIG,KAAJ,CAAUF,OAAV,CAAN;AACD;AACF,KAND,MAMO,IAAI,CAACD,OAAL,EAAc;AACnB,YAAM,IAAIG,KAAJ,SAAgBZ,YAAhB,qCAAN;AACD;;AAED;AACA,qBAAEc,GAAF,CAAMxB,MAAN,EAAcY,iBAAiBF,YAA/B,EAA6CS,OAA7C;;AAEA;AACA,QAAII,KAAK,iBAAEP,GAAF,CAAMD,IAAN,EAAYJ,OAAZ,KAAwB,iBAAEK,GAAF,CAAMjB,KAAN,EAAaY,OAAb,CAAjC;AACA;AACA,QAAI,CAACY,EAAL,EAAS;AACP,aAAOJ,QAAQf,IAAR,CAAa,EAAE0B,UAAU,KAAZ,EAAb,EAAkC,EAAEL,MAAM3B,KAAKE,MAAL,CAAYyB,IAApB,EAAlC,EAA8DC,IAA9D,CAAmE,mBAAW;AACnF;AACA,yBAAEF,GAAF,CAAMxB,MAAN,EAAca,YAAYF,OAA1B,EAAmCoB,OAAnC;AACA,eAAOjC,IAAP;AACD,OAJM,CAAP;AAKD,KAND,MAMO;AACL;AACA,UAAI,OAAOyB,EAAP,KAAc,QAAlB,EAA4B;AAC1B,eAAOJ,QAAQH,GAAR,CAAYO,EAAZ,EAAgB,EAAEE,MAAM3B,KAAKE,MAAL,CAAYyB,IAApB,EAAhB,EAA4CC,IAA5C,CAAiD,kBAAU;AAChE,cAAI,CAACC,MAAL,EAAa;AACX,kBAAM,IAAIL,KAAJ,6BAAoCX,OAApC,WAAiDY,EAAjD,+BAAN;AACD;AACD;AACA,2BAAEC,GAAF,CAAMxB,MAAN,EAAca,YAAYF,OAA1B,EAAmC,CAACgB,MAAD,CAAnC;AACA,iBAAO7B,IAAP;AACD,SAPM,CAAP;AAQD,OATD,MASO;AACL;AACA,yBAAE0B,GAAF,CAAMxB,MAAN,EAAca,YAAYF,OAA1B,EAAmC,CAACY,EAAD,CAAnC;AACA,eAAON,QAAQC,OAAR,CAAgBpB,IAAhB,CAAP;AACD;AACF;AACF,GAnDD;AAoDD","file":"query.js","sourcesContent":["import moment from 'moment'\r\nimport _ from 'lodash'\r\n// import makeDebug from 'debug'\r\n\r\n// const debug = makeDebug('kalisio:kCore')\r\n\r\nfunction marshallComparisonFieldsInQuery (queryObject) {\r\n  _.forOwn(queryObject, (value, key) => {\r\n    // Process current attributes or  recurse\r\n    if (typeof value === 'object') {\r\n      marshallComparisonFieldsInQuery(value)\r\n    } else if ((key === '$lt') || (key === '$lte') || (key === '$gt') || (key === '$gte')) {\r\n      let number = _.toNumber(value)\r\n      // Update from query string to number if required\r\n      if (!Number.isNaN(number)) {\r\n        queryObject[key] = number\r\n      } else {\r\n        // try for dates as well\r\n        let date = moment.utc(value)\r\n        if (date.isValid()) {\r\n          queryObject[key] = new Date(date.format())\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport function marshallComparisonQuery (hook) {\r\n  let query = hook.params.query\r\n  if (query) {\r\n    // Complex queries might have nested objects so we call a recursive function to handle this\r\n    marshallComparisonFieldsInQuery(query)\r\n  }\r\n}\r\n\r\nexport function marshallGeometryQuery (hook) {\r\n  let query = hook.params.query\r\n  if (!query) return\r\n\r\n  if (typeof query.geometry === 'object') {\r\n    // Geospatial operators begin with $\r\n    let geoOperator = _.keys(query.geometry).find(key => key.startsWith('$'))\r\n    geoOperator = query.geometry[geoOperator]\r\n    _.forOwn(geoOperator, (value, key) => {\r\n      // Geospatial parameters begin with $\r\n      if (key.startsWith('$')) {\r\n        // Some target coordinates\r\n        if (!_.isNil(value.coordinates)) {\r\n          value.coordinates = value.coordinates.map(coordinate => _.toNumber(coordinate))\r\n        } else {\r\n          // Other simple values\r\n          geoOperator[key] = _.toNumber(value)\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function populateObject (serviceField, idField, nameServiceAs, nameIdAs) {\r\n  return function (hook) {\r\n    let app = hook.app\r\n    let data = hook.data\r\n    let params = hook.params\r\n    let query = params.query\r\n\r\n    // Check if not already done\r\n    if (typeof _.get(params, nameIdAs || idField) === 'object') return Promise.resolve(hook)\r\n\r\n    // Get service where we can find the object to populate\r\n    // Make hook usable with query params as well and service name or real object\r\n    let service = _.get(data, serviceField) || _.get(query, serviceField)\r\n    if (typeof service === 'string') {\r\n      const message = `Cannot find the service for ${serviceField} = ${service} to dynamically populate.`\r\n      service = app.getService(service)\r\n      if (!service) {\r\n        throw new Error(message)\r\n      }\r\n    } else if (!service) {\r\n      throw new Error(`No ${serviceField} given to dynamically populate.`)\r\n    }\r\n    // Then the object ID\r\n    let id = _.get(data, idField) || _.get(query, idField)\r\n\r\n    if (!id) {\r\n      throw new Error(`Cannot find the ${idField} to dynamically populate.`)\r\n    }\r\n\r\n    // Set the retrieved service on the same field or given one in hook params\r\n    _.set(params, nameServiceAs || serviceField, service)\r\n    // Let it work with id string or real object\r\n    if (typeof id === 'string') {\r\n      return service.get(id, { user: hook.params.user }).then(object => {\r\n        if (!object) {\r\n          throw new Error(`Cannot find object with id ${id} to dynamically populate.`)\r\n        }\r\n        // Set the retrieved object on the same field or given one in hook params\r\n        _.set(params, nameIdAs || idField, object)\r\n        return hook\r\n      })\r\n    } else {\r\n      // Set the object on the same field or given one in hook params\r\n      _.set(params, nameIdAs || idField, id)\r\n      return Promise.resolve(hook)\r\n    }\r\n  }\r\n}\r\n\r\nexport function populateObjects (serviceField, idField, nameServiceAs, nameIdAs) {\r\n  return function (hook) {\r\n    let app = hook.app\r\n    let data = hook.data\r\n    let params = hook.params\r\n    let query = params.query\r\n\r\n    // Check if not already done\r\n    if (Array.isArray(_.get(params, nameIdAs || idField))) return Promise.resolve(hook)\r\n\r\n    // Get service where we can find the object to populate\r\n    // Make hook usable with query params as well and service name or real object\r\n    let service = _.get(data, serviceField) || _.get(query, serviceField)\r\n    if (typeof service === 'string') {\r\n      const message = `Cannot find the service for ${serviceField} = ${service} to dynamically populate.`\r\n      service = app.getService(service)\r\n      if (!service) {\r\n        throw new Error(message)\r\n      }\r\n    } else if (!service) {\r\n      throw new Error(`No ${serviceField} given to dynamically populate.`)\r\n    }\r\n\r\n    // Set the retrieved service on the same field or given one in hook params\r\n    _.set(params, nameServiceAs || serviceField, service)\r\n\r\n    // Then the object ID\r\n    let id = _.get(data, idField) || _.get(query, idField)\r\n    // If no ID given we perform a find, no pagination to be sure we get all objects\r\n    if (!id) {\r\n      return service.find({ paginate: false }, { user: hook.params.user }).then(objects => {\r\n        // Set the retrieved objects on the same field or given one in hook params\r\n        _.set(params, nameIdAs || idField, objects)\r\n        return hook\r\n      })\r\n    } else {\r\n      // Let it work with id string or real object\r\n      if (typeof id === 'string') {\r\n        return service.get(id, { user: hook.params.user }).then(object => {\r\n          if (!object) {\r\n            throw new Error(`Cannot find object for ${idField} = ${id} to dynamically populate.`)\r\n          }\r\n          // Set the retrieved object on the same field or given one in hook params\r\n          _.set(params, nameIdAs || idField, [object])\r\n          return hook\r\n        })\r\n      } else {\r\n        // Set the object on the same field or given one in hook params\r\n        _.set(params, nameIdAs || idField, [id])\r\n        return Promise.resolve(hook)\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}