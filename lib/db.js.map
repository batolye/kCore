{"version":3,"sources":["../src/db.js"],"names":["Database","app","_adapter","get","adapter","error","GeneralError","_collections","Map","MongoDatabase","_dbUrl","url","_db","connect","name","has","set","collection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEaA,Q,WAAAA,Q;AACX,oBAAaC,GAAb,EAAkB;AAAA;;AAChB,QAAI;AACF,WAAKA,GAAL,GAAWA,GAAX;AACA,WAAKC,QAAL,GAAgBD,IAAIE,GAAJ,CAAQ,IAAR,EAAcC,OAA9B;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACd,YAAM,IAAI,yBAAOC,YAAX,CAAwB,2DAAxB,CAAN;AACD;AACD,SAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AACD;;;;oCAMgB;AACf;AACA,aAAO,IAAP;AACD;;;wBAPc;AACb,aAAO,KAAKN,QAAZ;AACD;;;2BAOcD,G,EAAK;AAClB,cAAQA,IAAIE,GAAJ,CAAQ,IAAR,EAAcC,OAAtB;AACE,aAAK,SAAL;AACA;AACE,iBAAO,IAAIK,aAAJ,CAAkBR,GAAlB,CAAP;AAHJ;AAKD;;;;;IAGUQ,a,WAAAA,a;;;AACX,yBAAaR,GAAb,EAAkB;AAAA;;AAAA,4IACVA,GADU;;AAEhB,QAAI;AACF,YAAKS,MAAL,GAAcT,IAAIE,GAAJ,CAAQ,IAAR,EAAcQ,GAA5B;AACD,KAFD,CAEE,OAAON,KAAP,EAAc;AACd,YAAM,IAAI,yBAAOC,YAAX,CAAwB,oDAAxB,CAAN;AACD;AANe;AAOjB;;;;oCAEgB;AACf,UAAI;AACF,aAAKM,GAAL,GAAW,MAAM,kBAAQC,OAAR,CAAgB,KAAKH,MAArB,CAAjB;AACA,eAAO,KAAKE,GAAZ;AACD,OAHD,CAGE,OAAOP,KAAP,EAAc;AACd,0BAAOA,KAAP,CAAa,0BAA0B,KAAKJ,GAAL,CAASE,GAAT,CAAa,IAAb,EAAmBC,OAA7C,GAAuD,4CAApE;AACD;AACF;;;+BAMWU,I,EAAM;AAChB;AACA,UAAI,CAAC,KAAKP,YAAL,CAAkBQ,GAAlB,CAAsBD,IAAtB,CAAL,EAAkC;AAChC,aAAKP,YAAL,CAAkBS,GAAlB,CAAsBF,IAAtB,EAA4B,KAAKF,GAAL,CAASK,UAAT,CAAoBH,IAApB,CAA5B;AACD;AACD,aAAO,KAAKP,YAAL,CAAkBJ,GAAlB,CAAsBW,IAAtB,CAAP;AACD;;;wBAVe;AACd,aAAO,KAAKF,GAAZ;AACD;;;EArBgCZ,Q","file":"db.js","sourcesContent":["import mongodb from 'mongodb'\r\nimport logger from 'winston'\r\nimport errors from 'feathers-errors'\r\n\r\nexport class Database {\r\n  constructor (app) {\r\n    try {\r\n      this.app = app\r\n      this._adapter = app.get('db').adapter\r\n    } catch (error) {\r\n      throw new errors.GeneralError('Cannot find database adapter configuration in application')\r\n    }\r\n    this._collections = new Map()\r\n  }\r\n\r\n  get adapter () {\r\n    return this._adapter\r\n  }\r\n\r\n  async connect () {\r\n    // Default implementation\r\n    return null\r\n  }\r\n\r\n  static create (app) {\r\n    switch (app.get('db').adapter) {\r\n      case 'mongodb':\r\n      default:\r\n        return new MongoDatabase(app)\r\n    }\r\n  }\r\n}\r\n\r\nexport class MongoDatabase extends Database {\r\n  constructor (app) {\r\n    super(app)\r\n    try {\r\n      this._dbUrl = app.get('db').url\r\n    } catch (error) {\r\n      throw new errors.GeneralError('Cannot find database connection URL in application')\r\n    }\r\n  }\r\n\r\n  async connect () {\r\n    try {\r\n      this._db = await mongodb.connect(this._dbUrl)\r\n      return this._db\r\n    } catch (error) {\r\n      logger.error('Could not connect to ' + this.app.get('db').adapter + ' database, please check your configuration')\r\n    }\r\n  }\r\n\r\n  get instance () {\r\n    return this._db\r\n  }\r\n\r\n  collection (name) {\r\n    // Initializes the `collection` on sublevel `collection`\r\n    if (!this._collections.has(name)) {\r\n      this._collections.set(name, this._db.collection(name))\r\n    }\r\n    return this._collections.get(name)\r\n  }\r\n}\r\n"]}