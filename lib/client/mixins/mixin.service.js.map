{"version":3,"sources":["../../../src/client/mixins/mixin.service.js"],"names":["serviceMixin","props","service","type","Object","required","methods","find","params","_service","proxy","get","id","create","data","update","patch","remove","created","path","error","servive","context","$store","$api","getService"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAIA,eAAe;AACjBC,SAAO;AACLC,aAAS;AACPC,YAAMC,MADC;AAEPC,gBAAU;AAFH;AADJ,GADU;AAOjBC,WAAS;AACPC,QADO,gBACDC,MADC,EACO;AACZ,aAAO,KAAKC,QAAL,CAAcF,IAAd,CAAmBG,MAAMF,MAAN,CAAnB,CAAP;AACD,KAHM;AAIPG,OAJO,eAIFC,EAJE,EAIEJ,MAJF,EAIU;AACf,aAAO,KAAKC,QAAL,CAAcE,GAAd,CAAkBC,EAAlB,EAAsBF,MAAMF,MAAN,CAAtB,CAAP;AACD,KANM;AAOPK,UAPO,kBAOCC,IAPD,EAOON,MAPP,EAOe;AACpB,aAAO,KAAKC,QAAL,CAAcI,MAAd,CAAqBC,IAArB,EAA2BJ,MAAMF,MAAN,CAA3B,CAAP;AACD,KATM;AAUPO,UAVO,kBAUCH,EAVD,EAUKE,IAVL,EAUWN,MAVX,EAUmB;AACxB,aAAO,KAAKC,QAAL,CAAcM,MAAd,CAAqBH,EAArB,EAAyBE,IAAzB,EAA+BJ,MAAMF,MAAN,CAA/B,CAAP;AACD,KAZM;AAaPQ,SAbO,iBAaAJ,EAbA,EAaIE,IAbJ,EAaUN,MAbV,EAakB;AACvB,aAAO,KAAKC,QAAL,CAAcO,KAAd,CAAoBJ,EAApB,EAAwBE,IAAxB,EAA8BJ,MAAMF,MAAN,CAA9B,CAAP;AACD,KAfM;AAgBPS,UAhBO,kBAgBCL,EAhBD,EAgBKJ,MAhBL,EAgBa;AAClB,aAAO,KAAKC,QAAL,CAAcQ,MAAd,CAAqBL,EAArB,EAAyBF,MAAMF,MAAN,CAAzB,CAAP;AACD;AAlBM,GAPQ;AA2BjBU,SA3BiB,qBA2BN;AACT,QAAI,CAAC,KAAKhB,OAAL,CAAaiB,IAAlB,EAAwB;AACtB,yBAAOC,KAAP,CAAa,8DAAb;AACA;AACD;AACD,QAAID,OAAO,KAAKE,OAAL,CAAaF,IAAxB;AACA,QAAIG,UAAU,KAAKC,MAAL,CAAYZ,GAAZ,CAAgB,KAAKT,OAAL,CAAaoB,OAA7B,EAAsC,IAAtC,CAAd;AACA,SAAKb,QAAL,GAAgB,KAAKe,IAAL,CAAUC,UAAV,CAAqBN,IAArB,EAA2BG,OAA3B,CAAhB;AACA,QAAI,CAAC,KAAKb,QAAV,EAAoB;AAClB,yBAAOW,KAAP,CAAa,uCAAb;AACD;AACF;AAtCgB,CAAnB;;kBAyCepB,Y","file":"mixin.service.js","sourcesContent":["import logger from 'loglevel'\n\nlet serviceMixin = {\n  props: {\n    service: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: {\n    find (params) { \n      return this._service.find(proxy(params)) \n    },\n    get (id, params) { \n      return this._service.get(id, proxy(params)) \n    },\n    create (data, params) { \n      return this._service.create(data, proxy(params)) \n    },\n    update (id, data, params) { \n      return this._service.update(id, data, proxy(params)) \n    },\n    patch (id, data, params) { \n      return this._service.patch(id, data, proxy(params)) \n    },\n    remove (id, params) { \n      return this._service.remove(id, proxy(params)) \n    }\n  },\n  created () {\n    if (!this.service.path) {\n      logger.error('The \\'service\\' property should contains a \\'path\\' property')\n      return\n    }\n    let path = this.servive.path\n    let context = this.$store.get(this.service.context, null)\n    this._service = this.$api.getService(path, context)\n    if (!this._service) {\n      logger.error('The specified service doest not exist')\n    }\n  }\n}\n\nexport default serviceMixin\n"]}