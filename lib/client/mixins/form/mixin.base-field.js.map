{"version":3,"sources":["../../../../src/client/mixins/form/mixin.base-field.js"],"names":["baseFieldMixin","props","property","type","Object","required","display","computed","icon","field","label","labelWidth","helper","hasError","isEmpty","error","errorLabel","data","model","methods","validate","invalidate","touch","$emit","name","value","fill","mounted","has","default"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAIA,iBAAiB;AACnBC,SAAO;AACLC,cAAU;AACRC,YAAMC,MADE;AAERC,gBAAU;AAFF,KADL;AAKLC,aAAS;AACPH,YAAMC,MADC;AAEPC,gBAAU;AAFH;AALJ,GADY;AAWnBE,YAAU;AACRC,QADQ,kBACA;AACN,UAAI,KAAKF,OAAL,CAAaE,IAAjB,EAAuB;AACrB,eAAO,KAAKN,QAAL,CAAcO,KAAd,CAAoBD,IAA3B;AACD;AACD,aAAO,EAAP;AACD,KANO;AAORE,SAPQ,mBAOC;AACP,UAAI,KAAKJ,OAAL,CAAaI,KAAjB,EAAwB;AACtB,eAAO,KAAKR,QAAL,CAAcO,KAAd,CAAoBC,KAA3B;AACD;AACD,aAAO,EAAP;AACD,KAZO;AAaRC,cAbQ,wBAaM;AACZ,aAAO,KAAKL,OAAL,CAAaK,UAApB;AACD,KAfO;AAgBRC,UAhBQ,oBAgBE;AACR,aAAO,KAAKV,QAAL,CAAcO,KAAd,CAAoBG,MAA3B;AACD,KAlBO;AAmBRC,YAnBQ,sBAmBI;AACV,aAAO,CAAC,iBAAEC,OAAF,CAAU,KAAKC,KAAf,CAAR;AACD,KArBO;AAsBRC,cAtBQ,wBAsBM;AACZ,aAAO,KAAKD,KAAZ;AACD;AAxBO,GAXS;AAqCnBE,MArCmB,kBAqCX;AACN,WAAO;AACL;AACAC,aAAO,EAFF;AAGL;AACAH,aAAO;AAJF,KAAP;AAMD,GA5CkB;;AA6CnBI,WAAS;AACPC,YADO,sBACK;AACV,WAAKL,KAAL,GAAa,EAAb;AACD,KAHM;AAIPM,cAJO,sBAIKN,KAJL,EAIY;AACjB,WAAKA,KAAL,GAAaA,KAAb;AACD,KANM;AAOPO,SAPO,mBAOE;AACP,WAAKC,KAAL,CAAW,SAAX,EAAsB,KAAKrB,QAAL,CAAcsB,IAApC,EAA0C,KAAKN,KAA/C;AACD,KATM;AAUPO,SAVO,mBAUE;AACP,aAAO,KAAKP,KAAZ;AACD,KAZM;AAaPQ,QAbO,gBAaDD,KAbC,EAaM;AACX,WAAKP,KAAL,GAAaO,KAAb;AACA,WAAKH,KAAL;AACD;AAhBM,GA7CU;AA+DnBK,SA/DmB,qBA+DR;AACT;AACA,QAAI,iBAAEC,GAAF,CAAM,KAAK1B,QAAX,EAAqB,SAArB,CAAJ,EAAqC;AACnC,WAAKwB,IAAL,CAAU,KAAKxB,QAAL,CAAc2B,OAAxB;AACD;AACF;AApEkB,CAArB;;kBAuEe7B,c","file":"mixin.base-field.js","sourcesContent":["import _ from 'lodash'\r\n\r\nlet baseFieldMixin = {\r\n  props: {\r\n    property: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    display: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    icon () {\r\n      if (this.display.icon) {\r\n        return this.property.field.icon\r\n      }\r\n      return ''\r\n    },\r\n    label () {\r\n      if (this.display.label) {\r\n        return this.property.field.label\r\n      }\r\n      return ''\r\n    },\r\n    labelWidth () {\r\n      return this.display.labelWidth\r\n    },\r\n    helper () {\r\n      return this.property.field.helper\r\n    },\r\n    hasError () {\r\n      return !_.isEmpty(this.error)\r\n    },\r\n    errorLabel () {\r\n      return this.error\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      // The model to used for data binding with the field\r\n      model: '',\r\n      // The error message\r\n      error: ''\r\n    }\r\n  },\r\n  methods: {\r\n    validate () {\r\n      this.error = ''\r\n    },\r\n    invalidate (error) {\r\n      this.error = error\r\n    },\r\n    touch () {\r\n      this.$emit('touched', this.property.name, this.model)\r\n    },\r\n    value () {\r\n      return this.model\r\n    },\r\n    fill (value) {\r\n      this.model = value\r\n      this.touch()\r\n    }\r\n  },\r\n  mounted () {\r\n    // Initialize the model with a default value if any\r\n    if (_.has(this.property, 'default')) {\r\n      this.fill(this.property.default)\r\n    }\r\n  }\r\n}\r\n\r\nexport default baseFieldMixin\r\n"]}